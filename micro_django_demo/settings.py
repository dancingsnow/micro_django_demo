"""
Django settings for micro_django_demo project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))   # 此项目的根目录

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fz=ux&^p4x0poo(_8x_v)jbs))a6f_^!8_-uw7o^upx=o22^63'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if str(os.environ.get("DEBUG")).lower() == "true" else False

ALLOWED_HOSTS = ["*"]

# print("DEBUG: %s, type('DEBUG'): %s"%(os.environ['DEBUG'], type(os.environ['DEBUG'])))  #  DEBUG: true, type('DEBUG'): <class 'str'>

# Application definition
INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'book_demo'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'micro_django_demo.logger_middleware.LoggerMiddleware',
]

ROOT_URLCONF = 'micro_django_demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'micro_django_demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# from django.db.backends.mysql.base   # mysqldb位置
DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ['DB_NAME'],
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PWD"],
        "HOST": os.environ["DB_HOST"],
        "PORT": os.environ.get("DB_PORT", "3306"),
        'OPTIONS': {'charset': 'utf8mb4'}
    }
}



# django自带的缓存系统
# CACHES = {
#     "default": {
#         "BACKEND": "redis_cache.cache.RedisCache",
#         "LOCATION": "localhost:6379",
#         'TIMEOUT': 60,
#     },
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_CHARSET = 'utf-8'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# from django.contrib.staticfiles.views import serve   # 静态文件处理服务器，仅限debug模式用
STATIC_URL = '/static/'

# STATIC_ROOT用于进行静态文件迁移时的路径指向, 执行 python manage.py collectstatic 命令，会将admin等所有涉及的到静态文件，复制一份到其指定的目录下，当然命令也会自动跟踪变化
STATIC_ROOT = os.path.join(BASE_DIR, "static")      # /Users/rowena/Desktop/bysnow/micro_django_demo/micro_django_demo/static


# 静态文件目录列表，Django会从中寻找文件
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static")
# ]


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    )
}


SWAGGER_SETTINGS = {
    # 安全定义
    # 默认：[{'Basic': []}, {'Bearer': []}]
    # 可在@swagger_auto_schema的security参数 添加单独接口的设置
    'SECURITY_DEFINITIONS': {
        # 用basic生成sdk后需要输入账号密码
        # "basic": {  # 默认值
        #     'type': 'basic'
        # }
        #
        "api_key": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "SECURITY_REQUIREMENTS": None,   # 全局安全需要，若为None，所有在SECURITY_DEFINITIONS都被接受

    'USE_SESSION_AUTH': False,  # 启用/禁用Django登录作为身份验证/授权机制。还控制UI登录退出按钮是否展示
    'LOGIN_URL': '/admin/login',   # 默认值：django.conf.settings.LOGIN_URL, 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.
    'LOGOUT_URL': '/admin/logout',  # 默认值：django.conf.settings.LOGOUT_URL ，这两个配合use_session_auth实现

    "DEFAULT_API_URL": "http://localhost:4444",  # 先取schema_view，再去settings里的

    'TAGS_SORTER': 'alpha',  # 标签的排序顺序
    'OPERATIONS_SORTER': 'alpha',  # 每个标签的操作列表的排序顺序： None服务器返回顺序， alpha按路径字母顺序，method按http方法顺序

    'DOC_EXPANSION': 'none',  # ui界面标签是否进行扩展,  none都不扩展，list只扩展标签， full所有都扩展

    'VALIDATOR_URL': None,   # 默认值：‘http://online.swagger.io/validator/’， 用于swagger-ui中显示验证徽章
    'SHOW_EXTENSIONS': True   # 默认展示扩展名
}

REDOC_SETTINGS = {
    'SPEC_URL': ('schema-json', {'format': '.json'}),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'pipe_separated': {
            'format': '%(asctime)s | %(levelname)s | %(name)s | %(message)s'
        }
    },
    'handlers': {
        'console_log': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
            'formatter': 'pipe_separated',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console_log'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['console_log'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console_log'],
            'level': 'INFO',  # 只有DEBUG=True并且这里为DEBUG，才会展示所执行的sql
            'propagate': False,
        },
        'drf_yasg': {
            'handlers': ['console_log'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console_log'],
        'level': 'INFO',
    }
}

MICRO_VERSION = "0.0.1"